varying highp vec2 v_texcoord0;
varying highp vec3 v_view_normal;
varying highp vec3 v_view_pos;
uniform sampler2D s_texColor;
uniform highp vec4 u_LightPosition_Radius;
uniform highp vec4 u_LightColor;
uniform highp vec4 u_FogColor;
uniform highp vec4 u_FogNearFar;
void main ()
{
  highp float tmpvar_1;
  tmpvar_1 = (u_LightPosition_Radius.w * 5.0);
  highp float tmpvar_2;
  highp vec3 x_3;
  x_3 = (u_LightPosition_Radius.xyz - v_view_pos);
  tmpvar_2 = sqrt(dot (x_3, x_3));
  highp float tmpvar_4;
  tmpvar_4 = clamp ((1.0 - (
    (tmpvar_2 * tmpvar_2)
   / 
    (tmpvar_1 * tmpvar_1)
  )), 0.0, 1.0);
  lowp vec4 color_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (s_texColor, v_texcoord0);
  if ((tmpvar_6.w < 0.6)) {
    discard;
  };
  color_5.xyz = mix (tmpvar_6.xyz, u_FogColor.xyz, clamp ((
    (sqrt(dot (v_view_pos, v_view_pos)) - u_FogNearFar.x)
   / 
    (u_FogNearFar.y - u_FogNearFar.x)
  ), 0.0, 1.0));
  color_5.w = 1.0;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = (((color_5.xyz * u_LightColor.xyz) * (tmpvar_4 * tmpvar_4)) * max (dot (v_view_normal, 
    normalize((u_LightPosition_Radius.xyz - v_view_pos))
  ), 0.0));
  gl_FragColor = tmpvar_7;
}

