#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, std430) buffer CB0 {
  uvec4 header;
  uint  pageList[];
  };
layout(binding = 1, r32ui) uniform uimage3D pageTbl;

void main() {
  const ivec3 size = imageSize(pageTbl);
  const ivec3 at   = ivec3(gl_GlobalInvocationID);
  if(any(greaterThanEqual(at, size)))
    return;
#if 1
  const uint alloc = imageLoad(pageTbl, at).r;
  if(alloc==0)
    return;

  const uint pageId = atomicAdd(header.x, 1);
  if(pageId>=pageList.length()) {
    imageStore(pageTbl, at, uvec4(0xFFFFFFFF));
    return;
    }

  pageList[pageId] = packUint4x8(uvec4(at.xyz,0));
  imageStore(pageTbl, at, uvec4(pageId,0,0,0));
#else
  // debug
  if(gl_GlobalInvocationID.z!=1) {
    imageStore(pageTbl, at, uvec4(0xFFFFFFFF));
    return;
    }

  const uint page   = packUint4x8(uvec4(at.xyz,0));
  //const uint pageId = atomicAdd(header.x, 1);
  const uint pageId = (at.x + at.y*32);

  pageList[pageId] = page;
  imageStore(pageTbl, at, uvec4(pageId,0,0,0));
#endif
  }
