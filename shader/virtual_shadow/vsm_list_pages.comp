#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, std430) buffer CB0 {
  VsmHeader header;
  uint      pageList[];
  };
layout(binding = 1, r32ui) uniform uimage3D pageTbl;

void main() {
  const ivec3 size = imageSize(pageTbl);
  const ivec3 at   = ivec3(gl_GlobalInvocationID);

  if(any(greaterThanEqual(at, size)))
    return;

  const uint alloc = imageLoad(pageTbl, at).r;
  if(alloc==0) {
    imageStore(pageTbl, at, uvec4(0xFFFFFFFF));
    return;
    }

  const uint pageId = atomicAdd(header.pageCount, 1);
  if(pageId>=pageList.length()) {
    imageStore(pageTbl, at, uvec4(0xFFFFFFFF));
    return;
    }

  atomicMin(header.pageBbox[at.z].x, at.x);
  atomicMin(header.pageBbox[at.z].y, at.y);
  atomicMax(header.pageBbox[at.z].z, at.x+1);
  atomicMax(header.pageBbox[at.z].w, at.y+1);

  pageList[pageId] = packVsmPageInfo(at.xyz, ivec2(alloc));
  imageStore(pageTbl, at, uvec4(pageId,0,0,0));
  }
