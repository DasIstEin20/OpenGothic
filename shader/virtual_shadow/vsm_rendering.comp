#version 450

layout(local_size_x = 8, local_size_y = 8) in;

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_EXT_control_flow_attributes : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable

#include "common.glsl"
#include "scene.glsl"

const uint UINT_MAX      = 0xFFFFFFFF;
const int  PAGE_SIZE     = 128;
const int  PAGE_TBL_SIZE = 128;
const int  CLIPMAP_SIZE  = PAGE_SIZE * PAGE_TBL_SIZE;
const uint GroupSize     = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint MaxVert       = 64;
const uint MaxPrim       = 64;
const uint MaxInd        = (MaxPrim*3);

const vec3 debugColors[] = {
  vec3(1,1,1),
  vec3(1,0,0),
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  };

struct Vertex {
  vec3 pos;
  vec2 uv;
  };

struct Cluster {
  vec4  sphere;
  uint  bucketId_commandId;
  uint  firstMeshlet;
  int   meshletCount;
  uint  instanceId;
  };

layout(push_constant, std430) uniform UboPush {
  uint      firstMeshlet;
  int       meshletCount;
  float     znear;
  } push;
layout(binding = 0, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 1, std430) readonly buffer CB0 {
  uvec4 header;
  uint  pageList[];
  };
layout(binding = 2, rgba8) uniform image2D pageData;

layout(binding = 3, std430) readonly buffer Cbo { Cluster clusters[]; };
layout(binding = 4, std430) readonly buffer Ibo { uint    indexes []; } ibo[];
layout(binding = 5, std430) readonly buffer Vbo { float   vertices[]; } vbo[];
layout(binding = 6)         uniform  texture2D  textureMain[];
layout(binding = 7)         uniform  sampler    samplerMain;

//
uvec2 pageImageAt = uvec2(0,0);
vec4  fragData    = vec4(0.1, 0.4, 0.4, 0.0);

//
shared uint clustersIterator;
shared uint clusterVisBits[(GroupSize+31)/32];
shared uint clusterCurrent;

shared uint meshletQueue;

shared Vertex meshVertices[MaxVert];
shared uvec3  primitiveIndices[MaxPrim];
shared uint   maxVertices, maxPrimitives, meshBucket;

//
uint hash(uvec3 gridPos) {
  return (gridPos.x * 18397) + (gridPos.y * 20483) + (gridPos.z * 29303);
  }

float edgeFunction(const vec2 a, const vec2 b, const vec2 c) {
  return (c.x - a.x) * (b.y - a.y) - (c.y - a.y) * (b.x - a.x);
  }

void clearPage(vec4 f) {
  for(uint x=0; x<PAGE_SIZE; x+=gl_WorkGroupSize.x)
    for(uint y=0; y<PAGE_SIZE; y+=gl_WorkGroupSize.y) {
      uvec2 pix = uvec2(x,y) + gl_LocalInvocationID.xy;
      imageStore(pageData, ivec2(pageImageAt+pix), f);
      }
  }

void clearPage() {
  clearPage(fragData);
  }

void setMeshOutputs(uint v, uint p, uint bucket) {
  if(gl_LocalInvocationIndex==0) {
    maxVertices   = v;
    maxPrimitives = p;
    meshBucket    = bucket;
    }
  barrier();
  }

uvec2 pullMeshlet(const uint meshletId, const uint bucketId) {
  nonuniformEXT uint bId = bucketId;

  const uint iboOffset = meshletId * MaxPrim + MaxPrim - 1;
  const uint bits      = ibo[bId].indexes[iboOffset];
  uvec4 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);

  uint vertCount = MaxVert;
  uint primCount = MaxPrim;
  if(prim.x==prim.y) {
    // last dummy triangle encodes primitive count
    prim.z = ((bits >> 16) & 0xFF);
    prim.w = ((bits >> 24) & 0xFF);

    primCount = prim.z;
    vertCount = prim.w;
    }
  return uvec2(vertCount, primCount);
  }

uvec3 pullPrimitive(const uint meshletId, const uint bucketId, const uint laneId) {
  nonuniformEXT uint bId = bucketId;

  const uint iboOffset = meshletId * MaxPrim + laneId;
  const uint bits      = ibo[bId].indexes[iboOffset];
  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

Vertex pullVertex(const uint meshletId, const uint bucketId, const uint laneId) {
  nonuniformEXT uint bId = bucketId;
  uint vboOffset = meshletId * MaxVert + laneId;

  // static geometry
  uint id = vboOffset * 9;
  Vertex ret;
  ret.pos    = vec3(vbo[bId].vertices[id + 0], vbo[bId].vertices[id + 1], vbo[bId].vertices[id + 2]);
  ret.uv     = vec2(vbo[bId].vertices[id + 6], vbo[bId].vertices[id + 7]);
  //vec3 normal = vec3(vbo[bId].vertices[id + 3], vbo[bId].vertices[id + 4], vbo[bId].vertices[id + 5]);
  //uint color  = floatBitsToUint(vbo[bId].vertices[id + 8]);
  return ret;
  }

bool mainCluster(const uint i, const vec4 viewPort, uint mip) {
  if(i>=clusters.length())
    return false;

  const Cluster c = clusters[i];
  if(c.instanceId!=UINT_MAX)
    return false; // only landscape for now
  if(c.sphere.w<=0.f)
    return false; // disabled or deleted

  vec4 pos = scene.viewVirtualShadow * vec4(c.sphere.xyz,1);
  pos.xy /= (1 << mip);

  if(pos.x < viewPort.x || viewPort.z < pos.x ||
     pos.y < viewPort.y || viewPort.w < pos.y)
    return false;

  return true;
  }

void mainMesh(uint meshletId, uint bucketId, uint mip) {
  const uvec2 mesh       = pullMeshlet(meshletId, bucketId);
  const uint  vertCount  = mesh.x;
  const uint  primCount  = mesh.y;

  const uint  laneID     = gl_LocalInvocationIndex;

  // Alloc outputs
  setMeshOutputs(vertCount, primCount, bucketId);
  if(laneID<primCount)
    primitiveIndices[laneID] = pullPrimitive(meshletId, bucketId, laneID);
  if(laneID<vertCount) {
    Vertex v = pullVertex(meshletId, bucketId, laneID);
    vec4 pos4 = scene.viewVirtualShadow * vec4(v.pos,1);
    v.pos = pos4.xyz/pos4.w;
    v.pos.xy /= (1 << mip);
    meshVertices[laneID] = v;
    }
  }

bool processClusters(const vec4 viewPort, uint mip) {
  [[unroll]]
  for(uint i=gl_LocalInvocationIndex; i<clusterVisBits.length(); i+=GroupSize) {
    clusterVisBits[i] = 0;
    }
  barrier();

  while(clustersIterator<clusters.length()) {
    if(gl_LocalInvocationIndex==0)
      atomicAdd(clustersIterator, GroupSize);
    barrier();

    const uint iterator = (clustersIterator-GroupSize);
    if(mainCluster(iterator + gl_LocalInvocationIndex, viewPort, mip)) {
      atomicOr(clusterVisBits[gl_LocalInvocationIndex/32], (1u<<gl_LocalInvocationIndex%32));
      }
    barrier();

    [[unroll]]
    for(uint i=0; i<clusterVisBits.length(); i++) {
      if(clusterVisBits[i]!=0)
        return true;
      }
    }

  return false;
  }

bool processMeshlets(uint mip) {
  if(gl_LocalInvocationIndex==0) {
    maxVertices    = 0;
    maxPrimitives  = 0;
    clusterCurrent = UINT_MAX;

    const uint firstCluster = (clustersIterator-GroupSize);
    for(uint i=0; i<clusterVisBits.length(); ++i) {
      const int lsb = findLSB(clusterVisBits[i]);
      if(lsb<0)
        continue;
      clusterVisBits[i] &= ~(1u << lsb);
      clusterCurrent = firstCluster + i*32 + lsb;
      }
    }
  barrier();
  if(clusterCurrent==UINT_MAX)
    return false;

  const uint    cId     = clusterCurrent;
  const Cluster cluster = clusters[cId];
  mainMesh(cluster.firstMeshlet, cluster.bucketId_commandId >> 16, mip);
  barrier(); // make sure data is ready for raster
  return true;
  }

void processRenderingTile(const uint pageId, const uint mip, uvec2 pix) {
  nonuniformEXT uint bucket  = meshBucket;
  const vec2 uv = vec2(pix)/PAGE_SIZE;
  //fragData = texture(sampler2D(textureMain[bucket], samplerMain), uv);

  const uvec4 pageDesc = unpackUint4x8(pageList[pageId]);
  const vec2  sp       = (vec2(pageDesc.xy * PAGE_SIZE + pix + 0.5)/vec2(PAGE_SIZE * PAGE_TBL_SIZE))*2.0-1.0;
  for(uint i=0; i<1 && i<maxPrimitives; ++i) {
    uvec3 tri = primitiveIndices[i];
    vec3  a   = meshVertices[tri.x].pos.xyz;
    vec3  b   = meshVertices[tri.y].pos.xyz;
    vec3  c   = meshVertices[tri.z].pos.xyz;

    float w0  = edgeFunction(b.xy, c.xy, sp);
    float w1  = edgeFunction(c.xy, a.xy, sp);
    float w2  = edgeFunction(a.xy, b.xy, sp);
    if(w0 < 0 || w1 < 0 || w2 < 0)
      continue;

    float area  = edgeFunction(a.xy, b.xy, c.xy);
    vec3  bc    = vec3(w0,w1,w2)/area;
    float depth = dot(vec3(a.z,b.z,c.z), bc);

    fragData = texture(sampler2D(textureMain[bucket], samplerMain), uv);
    }

  // const vec4  viewPort = ((vec4(pageDesc.xy, pageDesc.xy+1)/float(PAGE_TBL_SIZE))*2.0-1.0);
  // fragData.xyz = debugColors[hash(uvec3(pageDesc.xy,mip)) % debugColors.length()];
  // fragData.xyz = ((vec3(pageDesc.xy,0)/float(PAGE_TBL_SIZE))*2.0-1.0);
  // fragData.xy  = (vec2(pageDesc.xy * PAGE_SIZE + pix)/vec2(PAGE_SIZE * PAGE_TBL_SIZE))*2.0-1.0;
  // fragData.xyz = vec3(pageDesc.xy,0)/float(PAGE_TBL_SIZE);
  // fragData.xyz = vec3(pix.xy,0)/float(PAGE_SIZE);
  // fragData.xy  = fragData.xy*(viewPort.zw-viewPort.xy) + viewPort.xy;
  }

void processRendering(const vec4 viewPort, const uint pageId, const uint mip) {
  nonuniformEXT uint bucket = meshBucket;

  for(uint x=0; x<PAGE_SIZE; x+=gl_WorkGroupSize.x)
    for(uint y=0; y<PAGE_SIZE; y+=gl_WorkGroupSize.y) {
      uvec2 pix = uvec2(x,y) + gl_LocalInvocationID.xy;
      fragData  = imageLoad(pageData, ivec2(pageImageAt+pix));
      processRenderingTile(pageId, mip, pix);
      imageStore(pageData, ivec2(pageImageAt+pix), fragData);
      // imageStore(pageData, ivec2(pageImageAt+pix), uvec4(fragData,0,0,0));
      }
  }

void main() {
  meshletQueue     = -1;
  clustersIterator = 0;
  barrier();

  const uint  pageId   = gl_WorkGroupID.x;
  const uvec4 pageDesc = unpackUint4x8(pageList[pageId]);
  const uint  mip      = pageDesc.z;
  const vec4  viewPort = ((vec4(pageDesc.xy, pageDesc.xy+1)/float(PAGE_TBL_SIZE))*2.0-1.0);
  pageImageAt = uvec2(pageId%32, pageId/32)*PAGE_SIZE;

  clearPage();

  int count = 0;
  while(processClusters(viewPort, mip)) {
    while(processMeshlets(mip)) {
      processRendering(viewPort, pageId, mip);
      }
    }

  // clearPage(unpackUnorm4x8(count)); //debug
  processRendering(viewPort, pageId, mip);
  }
