#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, std430) buffer Pages { VsmHeader header; uint  pageList[]; } vsm;
layout(binding = 1, r32ui)  uniform uimage3D pageTbl;

shared uint minY;
shared uint minX  [gl_WorkGroupSize.y/4];
shared uint sWidth[gl_WorkGroupSize.y/4];
shared uint data[VSM_PAGE_TBL_SIZE+3][VSM_PAGE_TBL_SIZE+3];

uint packPage(uint samples, uint size, uint prime) {
  return (samples & 0xFF) | (size << 8) | (prime << 16);
  }

uint packPage(uint samples, uint size) {
  return (samples & 0xFF) | (size << 8);
  }

uint unpackSize(uint a){
  return (a >> 8) & 0xFF;
  }

uint unpackSamples(uint a){
  return a&0xFF;
  }

uint unpackPrimeBit(uint a){
  return (a >> 16) & 0x1;
  }

void poolPageTable() {
  const ivec3 size = imageSize(pageTbl);
  const ivec3 id   = ivec3(gl_LocalInvocationID);

  const uint dataSz = (VSM_PAGE_TBL_SIZE+3);
  for(uint i=id.x; i<dataSz; i+=gl_WorkGroupSize.x)
    for(uint r=id.y; r<dataSz; r+=gl_WorkGroupSize.y) {
      const ivec3 at = ivec3(i,r, gl_GlobalInvocationID.z);
      if(all(lessThan(at, size))) {
        const uint frag  = imageLoad(pageTbl, at).r;
        //data[at.x][at.y] = frag;
        data[at.x][at.y] = packPage(frag, frag, frag);
        } else {
        data[at.x][at.y] = 0;
        }
      }

  barrier();
  }

void storePageTable() {
  barrier();

  const ivec3 size = imageSize(pageTbl);
  const ivec3 at   = ivec3(gl_GlobalInvocationID);
  const ivec3 id   = ivec3(gl_LocalInvocationID);

  if(all(lessThan(at, size))) {
    uint d = data[at.x][at.y];
    uint p = unpackPrimeBit(d);
    //uint s = p>0 ? unpackSize(d) : 0;
    uint s = unpackSize(d);
    imageStore(pageTbl, at, uvec4((s<<1) | p) );
    }
  }

void main() {
  const ivec3 size = imageSize(pageTbl);
  const ivec3 at   = ivec3(gl_GlobalInvocationID);
  const ivec3 id   = ivec3(gl_LocalInvocationID);
  const uint  lane = gl_LocalInvocationIndex;

  poolPageTable();
  // if(true) {
  //   storePageTable();
  //   return;
  //   }

  if(lane < minX.length()) {
    minX  [lane] = 0xFFFF;
    sWidth[lane] = 0;
    }
  minY = 0xFFFF;
  barrier();

  const uint frag  = data[at.x][at.y];
  const bool prime = frag>0;
  if(prime) {
    atomicMin(minY, at.y);

    atomicMin(vsm.header.pageBbox[at.z].x, at.x);
    atomicMin(vsm.header.pageBbox[at.z].y, at.y);
    atomicMax(vsm.header.pageBbox[at.z].z, at.x+1);
    atomicMax(vsm.header.pageBbox[at.z].w, at.y+1);
    }
  barrier();

  const uint stripe = (at.y-minY)/4;
  if(frag>0)
    atomicMin(minX[stripe], at.x);
  barrier();

  const ivec2 tileCoord = ivec2(at.x - minX[stripe], at.y-minY);
  if(frag>0)
    atomicMax(sWidth[stripe], tileCoord.x + 1);
  barrier();

  const bool valid = (0<=tileCoord.x && tileCoord.x<sWidth[stripe] && 0<=tileCoord.y);
  const bool quad  = (valid && tileCoord.x%2==0 && tileCoord.y%2==0); // && at.x<size.x-1 && at.y<size.y-1);
  const bool bQuad = (valid && tileCoord.x%4==0 && tileCoord.y%4==0); // && at.x<size.x-2 && at.y<size.y-2);
  if(true && quad) {
    uint a = unpackPrimeBit(data[at.x+0][at.y+0]);
    uint b = unpackPrimeBit(data[at.x+1][at.y+0]);
    uint c = unpackPrimeBit(data[at.x+1][at.y+1]);
    uint d = unpackPrimeBit(data[at.x+0][at.y+1]);
    data[at.x][at.y] = packPage(a+b+c+d, 2);
    }
  barrier();

  if(!quad)
    data[at.x][at.y] = packPage(0,0);
  barrier();

  if(true && bQuad) {
    const int mergeQ = 5; //(at.z>4 ? 2 : 3)*2;
    uint a = unpackSamples(data[at.x+0][at.y+0]);
    uint b = unpackSamples(data[at.x+2][at.y+0]);
    uint c = unpackSamples(data[at.x+2][at.y+2]);
    uint d = unpackSamples(data[at.x+0][at.y+2]);
    uint s = (a+b+c+d);

    bool denie = (a==0 && b==0) || (c==0 && d==0); // horizontal-only patterns
    if(!denie && s >= mergeQ) {
      data[at.x+0][at.y+0] = packPage(s, 4);
      data[at.x+2][at.y+0] = packPage(0, 0);
      data[at.x+0][at.y+2] = packPage(0, 0);
      data[at.x+2][at.y+2] = packPage(0, 0);
      }
    }
  barrier();

  // prime bit
  {
  uint d = unpackSamples(data[at.x][at.y]);
  uint s = unpackSize   (data[at.x][at.y]);
  data[at.x][at.y] = packPage(d ,s, prime ? 1 : 0);
  }
  barrier();

  // demote unfilled quads to 1x1 pages
  if(true && quad) {
    uint q = unpackSize    (data[at.x][at.y]);
    uint a = unpackPrimeBit(data[at.x+0][at.y+0]);
    uint b = unpackPrimeBit(data[at.x+1][at.y+0]);
    uint c = unpackPrimeBit(data[at.x+1][at.y+1]);
    uint d = unpackPrimeBit(data[at.x+0][at.y+1]);
    uint s = (a+b+c+d);

    bool denie = (a==0 && b==0) || (c==0 && d==0); // horizontal-only patterns
    if(q==2 && (denie || s<2)) {
      data[at.x+0][at.y+0] = packPage(1, a, a);
      data[at.x+1][at.y+0] = packPage(1, b, b);
      data[at.x+1][at.y+1] = packPage(1, c, c);
      data[at.x+0][at.y+1] = packPage(1, d, d);
      }
    }

  storePageTable();
  }

/*
void trimMip(int mip) {
  const ivec3 size = imageSize(pageTbl);
  const ivec3 id   = ivec3(gl_LocalInvocationID);

  const ivec2 b = ivec2(VSM_PAGE_TBL_SIZE/4);
  const ivec2 h = ivec2(VSM_PAGE_TBL_SIZE/2);

  for(int i=id.x; i<h.x; i+=int(gl_WorkGroupSize.x)) {
    for(int r=id.y; r<h.y; r+=int(gl_WorkGroupSize.y)) {
      ivec3 ax = ivec3(i+b.x, r+b.y, mip);
      uint  st = imageLoad(pageTbl, ax).r;
      if(st==0)
        continue;

      ivec3 at = ivec3(i*2, r*2, mip-1);
      uint  a  = imageLoad(pageTbl, at+ivec3(0,0,0)).r;
      uint  b  = imageLoad(pageTbl, at+ivec3(1,0,0)).r;
      uint  c  = imageLoad(pageTbl, at+ivec3(0,1,0)).r;
      uint  d  = imageLoad(pageTbl, at+ivec3(1,1,0)).r;
      if(a+b+c+d == 4) {
        imageStore(pageTbl, ax, uvec4(0));
        }
      }
    }
  }
*/
