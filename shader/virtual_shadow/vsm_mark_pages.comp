#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "lighting/tonemapping.glsl"
#include "scene.glsl"
#include "common.glsl"

#if defined(GL_COMPUTE_SHADER)
layout(local_size_x = 8, local_size_y = 8) in;
#endif

const vec3 debugColors[] = {
  vec3(1,1,1),
  vec3(1,0,0),
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  };

layout(binding  = 0, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 1) uniform texture2D       gbufDiffuse;
layout(binding = 2) uniform utexture2D      gbufNormal;
layout(binding = 3) uniform texture2D       depth;
#if defined(MARK_PAGES)
layout(binding = 4, r32ui) uniform uimage3D pageTbl;
#elif defined(COMPOSE) || defined(DEBUG)
layout(binding = 4, r32ui) uniform readonly uimage3D pageTbl;
layout(binding = 5)        uniform texture2D         pageData;
layout(binding = 6, rgba8) uniform image2D           shadowMask;
#endif

#if defined(COMPOSE) || defined(DEBUG)
layout(location = 0) out vec4 outColor;
#endif

#if defined(GL_COMPUTE_SHADER)
ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
#else
ivec2 pixelPos = ivec2(gl_FragCoord.xy);
#endif

uint hash(uvec3 gridPos) {
  return (gridPos.x * 18397) + (gridPos.y * 20483) + (gridPos.z * 29303);
  }

vec4 worldPosLwc(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  // return scene.viewProjectLwcInv * scr;
  return scene.viewProjectInv * scr;
  }

vec3 shadowPos(float z, ivec2 offset) {
  const vec4  wpos = worldPosLwc(pixelPos+offset, z);
  vec4 shPos = scene.viewVirtualShadow * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

int shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = -1;
  return int((minLod + maxLod)*0.5 + bias + 0.5);
  }

float shadowTexelFetch(vec2 page, int mip) {
#if defined(COMPOSE) || defined(DEBUG)
  //page-local
  const ivec2 pageI       = ivec2((page*0.5+0.5)*VSM_PAGE_TBL_SIZE);
  const vec2  pageF       = fract((page*0.5+0.5)*VSM_PAGE_TBL_SIZE);
  const ivec2 at          = ivec2(pageF*VSM_PAGE_SIZE);

  //page-global
  const uint  pageId      = imageLoad(pageTbl, ivec3(pageI, mip)).x;
  if(pageId==0xFFFFFFFF)
    return 0;

  const ivec2 pageImageAt = unpackVsmPageId(pageId)*VSM_PAGE_SIZE + at;
  return texelFetch(pageData, pageImageAt, 0).x;
#else
  return (0);
#endif
  }

float shadowTest(vec2 page, int mip, float refZ) {
  const float bias = 2.0/(65535.0); // self-occlusion on trees
  const float z    = shadowTexelFetch(page, mip) + bias;
  return z<refZ ? 1 : 0;
  }

void markPage(ivec2 pageI, int mip) {
#if defined(MARK_PAGES)
  //imageAtomicAdd(pageTbl, ivec3(pageI, mip), 1u);
  imageStore(pageTbl, ivec3(pageI, mip), uvec4(1u));
#endif
  }

#if defined(GL_FRAGMENT_SHADER)
float lambert(vec3 normal) {
  return max(0.0, dot(scene.sunDir,normal));
  }

vec3 directLight(vec2 page, int mip, float refZ) {
  const ivec2 fragCoord = ivec2(gl_FragCoord.xy);
  const float d         = texelFetch(depth, fragCoord, 0).r;
  if(d==1.0) {
    return vec3(0);
    }

  const vec4  diff   = texelFetch (gbufDiffuse, fragCoord, 0);
  const vec3  normal = normalFetch(gbufNormal,  fragCoord);

  bool isFlat  = false;
  bool isATest = false;
  bool isWater = false;
  decodeBits(diff.a, isFlat, isATest, isWater);

  const float light  = (isFlat ? 0 : lambert(normal));
  float shadow = 1;
  if(light>0) {
    shadow = shadowTest(page, mip, refZ);
    }

  const vec3 illuminance = scene.sunColor * light * shadow;
  const vec3 linear      = textureAlbedo(diff.rgb);
  const vec3 luminance   = linear * Fd_Lambert * illuminance;

  return luminance * scene.exposure;
  }
#endif

void main() {
#if defined(DEBUG)
  outColor = vec4(0,0,0, 1);
#endif

  const ivec2 size = textureSize(depth, 0);
#if defined(GL_COMPUTE_SHADER)
  if(any(greaterThanEqual(pixelPos, size)))
    return;
#endif

  const float z = texelFetch(depth, pixelPos, 0).x;
  if(z==1)
    return;

  vec3  shPos0 = shadowPos(z, ivec2(0,0));
  vec2  shPos1 = shadowPos(z, ivec2(1,0)).xy;
  vec2  shPos2 = shadowPos(z, ivec2(0,1)).xy;

  int   mip    = shadowLod((shPos1 - shPos0.xy)*VSM_CLIPMAP_SIZE,
                           (shPos2 - shPos0.xy)*VSM_CLIPMAP_SIZE);
  vec2  page   = shPos0.xy / (1<<mip);
  while(abs(page.x)>=1 || abs(page.y)>=1) {
    page /= 2;
    mip++;
    }
  if(any(greaterThan(abs(page), vec2(1))) || mip>=32)
    return;

  ivec2 pageI = ivec2((page*0.5+0.5)*VSM_PAGE_TBL_SIZE);
#if defined(MARK_PAGES)
  markPage(pageI, mip);
#elif defined(COMPOSE)
  outColor = vec4(directLight(page, mip, shPos0.z), 1);
#endif

#if defined(DEBUG)
  // int  mip   = 0;
  // vec3 color = directLight(page, mip, shPos0.z);
  vec3 color = debugColors[hash(uvec3(pageI,mip)) % debugColors.length()];
  // vec3 color = debugColors[mip % debugColors.length()];
  color *= (1.0 - shadowTexelFetch(page, mip));
  // color *= (shadowTest(page, mip, shPos0.z)*0.9+0.1);
  // vec3 color = vec3(shPos0, 0);
  // vec3 color = vec3(page, 0);
  // vec3 color = vec3(fract(page*VSM_PAGE_TBL_SIZE), 0);
  // vec4 color = shadowTexelFetch(page, mip);
  outColor = vec4(color.xyz,1);
#endif
  }
