#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_KHR_memory_scope_semantics : enable

#define LWC 1

#include "virtual_shadow/vsm_common.glsl"
#include "lighting/tonemapping.glsl"
#include "scene.glsl"
#include "common.glsl"

//layout(local_size_x = 8, local_size_y = 8) in;
layout(local_size_x = 16, local_size_y = 8) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;

layout(std140, push_constant) uniform Push {
  float vsmMipBias;
  };
layout(binding  = 0, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 1)        uniform texture2D  gbufDiffuse;
layout(binding = 2)        uniform utexture2D gbufNormal;
layout(binding = 3)        uniform texture2D  depth;
layout(binding = 4, r32ui) uniform uimage3D   pageTbl;
layout(binding = 5, r32ui) uniform uimage3D   pageTblDepth;

ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);

uint murmurHash11(uint src) {
  const uint M = 0x5bd1e995u;
  uint h = 1190494759u;
  src *= M; src ^= src>>24u; src *= M;
  h *= M; h ^= src;
  h ^= h>>13u; h *= M; h ^= h>>15u;
  return h;
  }

uint pageIdHash7(ivec3 src) {
  uint x = (src.x & 0x3) << 0;
  uint y = (src.y & 0x3) << 2;
  uint z = (src.z & 0x7) << 4;
  return x | y | z; // 7bit
  }

uint pack565_16(ivec3 a, uint b) {
  uint x = (a.x & 0x1F)   << 0;
  uint y = (a.y & 0x3F)   << 5;
  uint z = (a.z & 0x1F)   << 11;
  uint w = (  b & 0xFFFF);
  //uint d = uint(z*0xFFFF) << 16;
  return ((x | y | z) << 16) | w;
  }

uvec4 unpack565_16(uint p) {
  uvec4 ret;
  ret.w = p & 0xFFFF;
  p = p >> 16;
  ret.x = (p >>  0) & 0x1F;
  ret.y = (p >>  5) & 0x3F;
  ret.z = (p >> 11) & 0x1F;
  return ret;
  }

void storeHiZValue(uint v) {
  uvec4 dx = unpack565_16(v);
  ivec3 at = ivec3(dx.xyz);
  uint  iz = floatBitsToUint(dx.w/float(0xFFFF));

  //NOTE: require vulkan memory-model extension or vulkan 1.2
  //imageAtomicStore(pageTbl, at, 1u, gl_ScopeDevice, gl_StorageSemanticsNone, gl_SemanticsRelaxed);
  //imageStore(pageTbl, at, uvec4(1u));
  imageAtomicExchange(pageTbl, at, 1u);
  imageAtomicMin(pageTblDepth, at, iz);
  }

#if 0
shared uint pageHiZ[6];
void setupHiZ() {
  const uint lane = gl_LocalInvocationIndex;
  if(lane < pageHiZ.length())
    pageHiZ[lane] = 0xFFFFFFFF;
  }

void markPage(ivec3 at, float z) {
  if(z<0 || z>=1)
    return;
  //imageAtomicStore(pageTbl, at, 1u, gl_ScopeDevice, gl_StorageSemanticsNone, gl_SemanticsRelaxed);
  //return;

  uint iz  = uint(z*0xFFFF);
  uint cur = pack565_16(at,iz);
  for(uint i=0; i<pageHiZ.length(); ++i) {
    uint v = atomicMin(pageHiZ[i], cur);
    if(v==0xFFFFFFFF || (v&0xFFFF0000)==(cur&0xFFFF0000))
      return;
    cur = (v > cur) ? v : cur;
    }
  // imageAtomicAdd(pageTbl, ivec3(0), 1u); //counter
  storeHiZValue(cur);
  }

void flushHiZ() {
  const uint lane = gl_LocalInvocationIndex;
  if(lane >= pageHiZ.length())
    return;
  const uint v = pageHiZ[lane];
  if(v==0xFFFFFFFF)
    return;
  storeHiZValue(v);
  }
#else
shared uint pageHiZ[NumThreads];
void setupHiZ() {
  const uint lane = gl_LocalInvocationIndex;
  pageHiZ[lane] = 0xFFFFFFFF;
  }

void markPage(ivec3 at, float z) {
  if(z<0 || z>=1)
    return;

  uint iz  = uint(z*0xFFFF);
  uint cur = pack565_16(at,iz);
  // uint id  = murmurHash11(cur >> 16) % pageHiZ.length();
  uint id  = pageIdHash7(at) % pageHiZ.length();

  uint v   = atomicMin(pageHiZ[id], cur);
  if(v==0xFFFFFFFF)
    return; // clean insert
  if((v&0xFFFF0000)==(cur&0xFFFF0000))
    return; // update same entry

  // imageAtomicAdd(pageTbl, ivec3(0), 1u); //counter
  storeHiZValue(v);
  }

void flushHiZ() {
  const uint lane = gl_LocalInvocationIndex;
  const uint v    = pageHiZ[lane];
  if(v==0xFFFFFFFF)
    return;
  storeHiZValue(v);
  }
#endif

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
#if defined(LWC)
  return scene.viewProjectLwcInv * scr;
#else
  return scene.viewProjectInv * scr;
#endif
  }

vec3 shadowPos(float z, ivec2 offset) {
  const vec4  wpos = worldPos(pixelPos+offset, z);
#if defined(LWC)
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
#else
  vec4 shPos = scene.viewVirtualShadow * wpos;
#endif
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

int shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = vsmMipBias;
  //return max(0, int((minLod + maxLod)*0.5 + bias + 0.5));
  return max(0, int(minLod + bias + 0.5));
  }

void realMain() {
  const ivec2 size = textureSize(depth, 0);
  if(any(greaterThanEqual(pixelPos, size)))
    return;

  const float z = texelFetch(depth, pixelPos, 0).x;
  if(z==1)
    return;

  const vec3 normal = normalFetch(gbufNormal, pixelPos);
  if(dot(scene.sunDir,normal)<=0)
    return;

  vec3  shPos0 = shadowPos(z, ivec2(0,0));
  vec2  shPos1 = shadowPos(z, ivec2(1,0)).xy;
  vec2  shPos2 = shadowPos(z, ivec2(0,1)).xy;

  // expected to have ~9 mips
  int   mip    = shadowLod((shPos1 - shPos0.xy)*VSM_CLIPMAP_SIZE,
                           (shPos2 - shPos0.xy)*VSM_CLIPMAP_SIZE);
  vec2  page   = shPos0.xy / (1<<mip);
  while(abs(page.x)>=1 || abs(page.y)>=1) {
    page /= 2;
    mip++;
    }
  if(any(greaterThan(abs(page), vec2(1))) || mip>=VSM_PAGE_MIPS)
    return;

  ivec2 pageI = ivec2((page*0.5+0.5)*VSM_PAGE_TBL_SIZE);
  markPage(ivec3(pageI, mip), shPos0.z);
  }

void main() {
  setupHiZ();
  barrier();

  realMain();
  barrier();

  flushHiZ();
  }
