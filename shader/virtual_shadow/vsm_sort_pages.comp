#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "virtual_shadow/vsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

// NOTE: 1024 is too much invocations in some gpu's
layout(local_size_x = VSM_MAX_PAGES) in;

layout(binding = 0, std430) buffer CB0 {
  VsmHeader header;
  uint      pageList[];
  } vsm;
layout(binding = 1, r32ui) uniform uimage3D pageTbl;

uint pageCount = 0;

shared uint minPId;
shared uint pageList[1024];

void bubleSort() {
  const uint id = gl_LocalInvocationIndex;

  //uint v = page;
  uint v = id<pageCount ? pageList[id] : 0xFFFFFFFF;
  for(uint i=0; i<pageCount; ++i) {
    minPId = 0xFFFFFFFF;
    barrier();

    if(v!=0xFFFFFFFF)
      atomicMin(minPId, v);
    barrier();

    pageList[i] = minPId;
    if(minPId==v) {
      v = 0xFFFFFFFF;
      }
    barrier();
    }
  }

shared uint pageCount1x1;
shared uint pageCount2x2;
shared uint pageCount4x4;
void sizeSort() {
  const uint id = gl_LocalInvocationIndex;
  pageCount1x1 = 0;
  pageCount2x2 = 0;
  pageCount4x4 = 0;
  barrier();

  uint  v   = pageList[id];
  ivec2 s   = unpackVsmPageSize(v);
  ivec3 inf = unpackVsmPageInfo(v);
  pageList[id] = 0;

  if(s.x==4)
    atomicAdd(pageCount4x4, 1);
  else if(s.x==2)
    atomicAdd(pageCount2x2, 1);
  else if(s.x==1)
    atomicAdd(pageCount1x1, 1);
  barrier();

  const uint PAGE_2x2  = VSM_PAGE_PER_ROW/2;
  const uint PAGE_4x4  = VSM_PAGE_PER_ROW/4;
  const uint offset4x4 = ((pageCount4x4+PAGE_4x4-1)/PAGE_4x4)*4*VSM_PAGE_PER_ROW;
  const uint offset2x2 = ((pageCount2x2+PAGE_2x2-1)/PAGE_2x2)*2*VSM_PAGE_PER_ROW;

  if(s.x==4) {
    uint lid = (id - pageCount2x2 - pageCount1x1);
    uint row = (lid/PAGE_4x4), column = (lid%PAGE_4x4);
    uint nId = row*VSM_PAGE_PER_ROW*4 + column*4;

    pageList[nId+0] = v;
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,0,0), ivec2(0));
    pageList[nId+2] = packVsmPageInfo(inf+ivec3(2,0,0), ivec2(0));
    pageList[nId+3] = packVsmPageInfo(inf+ivec3(3,0,0), ivec2(0));
    nId += VSM_PAGE_PER_ROW;
    pageList[nId+0] = packVsmPageInfo(inf+ivec3(0,1,0), ivec2(0));
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,1,0), ivec2(0));
    pageList[nId+2] = packVsmPageInfo(inf+ivec3(2,1,0), ivec2(0));
    pageList[nId+3] = packVsmPageInfo(inf+ivec3(3,1,0), ivec2(0));
    nId += VSM_PAGE_PER_ROW;
    pageList[nId+0] = packVsmPageInfo(inf+ivec3(0,2,0), ivec2(0));
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,2,0), ivec2(0));
    pageList[nId+2] = packVsmPageInfo(inf+ivec3(2,2,0), ivec2(0));
    pageList[nId+3] = packVsmPageInfo(inf+ivec3(3,2,0), ivec2(0));
    nId += VSM_PAGE_PER_ROW;
    pageList[nId+0] = packVsmPageInfo(inf+ivec3(0,3,0), ivec2(0));
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,3,0), ivec2(0));
    pageList[nId+2] = packVsmPageInfo(inf+ivec3(2,3,0), ivec2(0));
    pageList[nId+3] = packVsmPageInfo(inf+ivec3(3,3,0), ivec2(0));
    nId += VSM_PAGE_PER_ROW;
    }
  barrier();

  if(s.x==2) {
    uint lid = (id-pageCount1x1);
    uint row = (lid/PAGE_2x2), column = (lid%PAGE_2x2);
    uint nId = row*VSM_PAGE_PER_ROW*2 + column*2 + offset4x4;

    pageList[nId+0] = v;
    // pageList[nId+0] = packVsmPageInfo(inf+ivec3(0,0,0), s);
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,0,0), ivec2(0));
    nId += VSM_PAGE_PER_ROW;
    pageList[nId+0] = packVsmPageInfo(inf+ivec3(0,1,0), ivec2(0));
    pageList[nId+1] = packVsmPageInfo(inf+ivec3(1,1,0), ivec2(0));
    }
  barrier();

  if(s.x==1) {
    uint nId = id + offset4x4 + offset2x2;
    pageList[nId] = v;
    }
  pageCount = offset4x4 + offset2x2 + pageCount1x1;
  barrier();
  }

void main() {
  const uint id = gl_LocalInvocationIndex;

  pageCount    = vsm.header.pageCount;
  pageList[id] = id<pageCount ? vsm.pageList[id] : 0;
  barrier();

  bubleSort();

  sizeSort();

  const uint  page = pageList[id];
  const ivec3 pix  = unpackVsmPageInfo(page);
  // const ivec2 s    = unpackVsmPageSize(page);

  vsm.pageList[id] = page;
  vsm.header.pageCount = pageCount;
  if(page!=0)
    imageStore(pageTbl, pix, uvec4(id,0,0,0));
  }
