#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

layout(local_size_x = RTSM_BIN_SIZE, local_size_y = RTSM_BIN_SIZE) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint MaxVert    = 64;
const uint MaxPrim    = 64;

layout(binding = 0, r8)     uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4)         uniform  utexture2D largeTiles;
layout(binding = 5, std430) readonly buffer Pos { uint alloc; uint  data[]; } pos;
layout(binding = 6, r32ui)  uniform  uimage2D   primitiveBins;
layout(binding = 7, r32ui)  uniform  uimage2D   dbgImage;


vec3  dbgColor  = vec3(0);
ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);

// counter
uint numMeshletsAll = 0;

// visible meshlets
shared uint numMeshlets;
shared uint meshletsId[NumThreads*2];

shared uint numPrimitives;
shared uint primitives[NumThreads];

shared uint numRays;
shared vec2 rays[NumThreads];

shared uint dbgCounter;
uint mergeCounter(uint cnt) {
  dbgCounter = 0;
  barrier();

  atomicAdd(dbgCounter, cnt);
  barrier();

  return dbgCounter;
  }

// utility
shared uvec4 rayBbox[RTSM_PAGE_MIPS];
shared uint  rayZmin[RTSM_PAGE_MIPS];
uint         numRbb = 0;
void rayBboxses(uint pkgMask, const uint selfMask, const vec3 ray, bool activeRay) {
  uint i = 0;
  while(pkgMask!=0) {
    const int bit = findLSB(pkgMask);
    pkgMask &= ~(1u << bit);

    rayBbox[i] = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
    rayZmin[i] = 0xFFFFFFFF;
    barrier();

    const bool isInBin = (selfMask & (1u << bit))!=0;
    if(activeRay && isInBin) {
      atomicMin(rayBbox[i].x, floatToOrderedUint(ray.x));
      atomicMin(rayBbox[i].y, floatToOrderedUint(ray.y));
      atomicMax(rayBbox[i].z, floatToOrderedUint(ray.x));
      atomicMax(rayBbox[i].w, floatToOrderedUint(ray.y));
      atomicMin(rayZmin[i],   floatToOrderedUint(ray.z));
      }
    barrier();
    if(rayBbox[i].x!=0xFFFFFFFF) {
      ++i;
      }
    }
  numRbb = i;
  }

// light/occlusion/matrix
float lambert(vec3 normal) {
  return max(0.0, dot(scene.sunDir,normal));
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  // return scene.viewProjectInv * scr;
  }

// pagging
int shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = 0;
  return max(0, int(minLod + bias));
  }

int calcMipIndex(in vec2 shPos) {
  float d  = max(abs(shPos.x), abs(shPos.y));
  uint  id = uint(d);
  return findMSB(id)+1;
  }

// ray managment
vec3 calcRayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

uint rayPacketId(const vec2 shPos, const float z) {
#if 0
  float dZ   = linearDepth(     z, scene.clipInfo);
  float d0   = linearDepth(0,      scene.clipInfo);
  float d1   = linearDepth(0.9999, scene.clipInfo);
  float d    = (dZ-d0)/(d1-d0);

  int id = int(d*RTSM_PAGE_MIPS);
  if(id>=RTSM_PAGE_MIPS)
    return 0;
  return 1u << id;
#else
  int mip = calcMipIndex(shPos);
  if(mip>=RTSM_PAGE_MIPS)
    return 0;
  return 1u << mip;
#endif
  }

shared uint rayPacketMask;
uint mergeMasks(uint m) {
  rayPacketMask = 0;
  barrier();
  atomicOr(rayPacketMask, m);
  barrier();
  return rayPacketMask;
  }

//
uint packPrimitiveId(uint meshlet, uint prim) {
  return (meshlet << 8) | prim;
  }

uint packTileHeader() {
  const uint n      = min(numPrimitives, primitives.length()) & 0xFFFF;
  const uint badBit = (numPrimitives>=primitives.length()) ? (1u << 31) : 0;
  return n | badBit;
  }

// meshlets-trace
bool bboxIncludes(vec4 aabb, vec2 p) {
  if(aabb.x < p.x && p.x < aabb.z &&
     aabb.y < p.y && p.y < aabb.w)
    return true;
  return false;
  }

bool isMeshletVisibleAabb(const vec4  aabb, const float depthMax) {
  for(uint i=0; i<numRbb; ++i) {
    const vec4 rbbox = orderedUintToFloat(rayBbox[i]);
    if(uintBitsToFloat(rayZmin[i]) > depthMax)
      continue;
    if(!bboxIntersect(aabb, rbbox))
      continue;
    return true;
    }
  return false;
  }

bool isMeshletVisible(uint ptr) {
  if(ptr==0xFFFFFFFF)
    return false;

  vec4  aabb;
  float depthMax;
  aabb.x   = uintBitsToFloat(pos.data[ptr+0]);
  aabb.y   = uintBitsToFloat(pos.data[ptr+1]);
  aabb.z   = uintBitsToFloat(pos.data[ptr+2]);
  aabb.w   = uintBitsToFloat(pos.data[ptr+3]);
  depthMax = uintBitsToFloat(pos.data[ptr+4]);
  if(!isMeshletVisibleAabb(aabb, depthMax))
    return false;

  for(uint i=0; i<numRays; ++i) {
    if(bboxIncludes(aabb, rays[i]))
      return true;
    }
  return false;
  }

// primitive-trace
bool isPrimitiveVisible(const vec4 aabb) {
  //float depthMax;

  for(uint i=0; i<numRbb; ++i) {
    const vec4 rbbox = orderedUintToFloat(rayBbox[i]);
    // if(uintBitsToFloat(rayZmin[i]) > depthMax)
    //   continue;
    if(!bboxIntersect(aabb, rbbox))
      continue;
    return true;
    }
  return false;
  }

uvec3 pullPrimitive(const uint ptr, const uint laneId) {
  uint bits = pos.data[ptr+laneId];

  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

vec3 pullVertex(uint ptr, const uint laneId) {
  ptr += 4*laneId;

  vec3 ret;
  ret.x = uintBitsToFloat(pos.data[ptr+0]);
  ret.y = uintBitsToFloat(pos.data[ptr+1]);
  ret.z = uintBitsToFloat(pos.data[ptr+2]);
  return ret;
  }

void processMeshletPrimitives(const uint ptr, const uint primCount, const uint laneID) {
  const uint maxMesh = 6;

  if(laneID<primCount) {
    uint ptrM = ptr;

    ptrM += maxMesh;
    const uvec3 tri = pullPrimitive(ptrM, laneID);

    ptrM += primCount;
    const vec3  a   = pullVertex(ptrM, tri.x);
    const vec3  b   = pullVertex(ptrM, tri.y);
    const vec3  c   = pullVertex(ptrM, tri.z);
    const vec4  tbb = bboxOf(a.xy, b.xy, c.xy);

    if(!isPrimitiveVisible(tbb))
      return;

    const uint id = atomicAdd(numPrimitives, 1);
    if(id<primitives.length())
      primitives[id] = packPrimitiveId(ptr, laneID);
    }
  }

void traceMeshlets() {
  const uint meshPerStep = NumThreads/MaxPrim;
  const uint meshId      = gl_LocalInvocationIndex/MaxPrim;
  const uint laneMs      = gl_LocalInvocationIndex%MaxPrim;

  for(uint i=meshId; i<numMeshlets; i+=meshPerStep) {
    const uint ptr     = meshletsId[i];
    const uint primCnt = unpackPrimitiveCount(pos.data[ptr+5]);
    processMeshletPrimitives(ptr, primCnt, laneMs);
    }
  }

void traceTile() {
  const uint  laneID    = gl_LocalInvocationIndex;

  const uvec2 largeTile = texelFetch(largeTiles, ivec2(fragCoord/RTSM_LARGE_TILE), 0).xy;
  const uint  tilePtr   = largeTile.x;
  const uint  visCount  = largeTile.y; //rtsm.header.visCount;
  const uint  steps     = (visCount + NumThreads - 1)/NumThreads;

  for(uint s=0; s<steps; ++s) {
    const uint i   = laneID + s*NumThreads;
    const uint ptr = i<visCount ? pos.data[tilePtr + i].x : 0xFFFFFFFF;
    // const uint ptr = i<visCount ? rtsm.visList[i].x : 0xFFFFFFFF;

    if(isMeshletVisible(ptr)) {
      numMeshletsAll++;
      uint id = atomicAdd(numMeshlets,1);
      meshletsId[id] = ptr;
      }
    barrier();

    if(numMeshlets>=NumThreads) {
      traceMeshlets();
      numMeshlets = 0;
      }
    barrier();
    }

  traceMeshlets();
  }

void storeResultPrim() {
  const ivec2 at = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy);
  if(gl_LocalInvocationIndex==0) {
    imageStore(primitiveBins, ivec2(gl_GlobalInvocationID.xy), uvec4(packTileHeader()));
    } else {
    const uint i = gl_LocalInvocationIndex-1;
    const uint v = (i<numPrimitives) ? primitives[i] : 0;
    imageStore(primitiveBins, ivec2(gl_GlobalInvocationID.xy), uvec4(v));
    }
  }

void main() {
  numRays        = 0;
  numMeshlets    = 0;
  numPrimitives  = 0;
  numMeshletsAll = 0;
  barrier();

  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const float lamb   = imageLoad(outputImage, fragCoord).x;
  // const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);

  const vec4  wpos   = worldPos(fragCoord.xy, z); // + vec4(normal*0.002, 0);
  const vec3  ray    = calcRayOrigin(wpos);
  const bool  actRay = !(lamb==0);

  if(actRay) {
    const uint id = atomicAdd(numRays,1);
    rays[id] = ray.xy;
    }

  const uint  selfMask = actRay ? rayPacketId(ray.xy,z) : 0;
  uint        pkgMask  = mergeMasks(selfMask);
  rayBboxses(pkgMask, selfMask, ray, actRay);
  barrier();

  traceTile();
  barrier();

  storeResultPrim();

  const uint ms = mergeCounter(numMeshletsAll);
  if(valid) {
    //imageStore(dbgImage, fragCoord, uvec4(numPrimitives));
    //imageStore(dbgImage, fragCoord, uvec4(ms));
    }
  }

