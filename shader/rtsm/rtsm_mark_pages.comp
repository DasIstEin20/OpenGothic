#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_samplerless_texture_functions : enable

#include "rtsm/rtsm_common.glsl"
#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 16, local_size_y = 8) in;

layout(binding = 0, r8)     uniform  image2D    outputImage;
layout(binding = 1, std140) uniform UboScene    { SceneDesc scene;       };
layout(binding = 2)         uniform texture2D   gbufDiffuse;
layout(binding = 3)         uniform utexture2D  gbufNormal;
layout(binding = 4)         uniform texture2D   depth;
layout(binding = 7, r32ui)  uniform uimage3D    pageTbl;

ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);

void markPage(ivec3 at, float z) {
  //TODO: amortize atomics, similar to VSM
  const uint iz = floatToOrderedUint(z);
  imageAtomicMin(pageTbl, at, iz);
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  }

vec3 calcRayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

bool calcMipIndex(out vec2 pagePos, out int mip, in vec2 shPos) {
  float d  = max(abs(shPos.x), abs(shPos.y));
  uint  id = uint(d);
  mip = findMSB(id)+1;
  if(mip>=RTSM_PAGE_MIPS)
    return false;
  pagePos = vec2(shPos / (1 << mip));
  return true;
  }

float markPages() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));
  if(!valid)
    return 0;

  const float z      = texelFetch(depth, fragCoord, 0).x;
  if(z==1.0)
    return 0; // make this fragment inactive

  const vec3  normal = normalFetch(gbufNormal, fragCoord);
  if(dot(scene.sunDir, normal) <= 0)
    return 0;

  const vec4  wpos   = worldPos(fragCoord.xy, z) + vec4(normal*0.002, 0);
  if(planetOcclusion(wpos.y/wpos.w, scene.sunDir))
    return 0;

  const vec4  diff   = texelFetch (gbufDiffuse, fragCoord, 0);
  if(isGBufFlat(diff.a))
    return 0;

  const vec3  ray    = calcRayOrigin(wpos);
  //const uint  idx    = rayPacketId(ray.xy, z);

  vec2 page = vec2(0);
  int  mip  = 0;
  if(!calcMipIndex(page, mip, ray.xy))
    return 1;

  ivec2 pageI = ivec2((page.xy*0.5+0.5)*RTSM_PAGE_TBL_SIZE);
  markPage(ivec3(pageI, mip), ray.z);
  return 1;
  }

void main() {
  const float val    = markPages();
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));
  if(valid) {
    imageStore(outputImage, fragCoord, vec4(val));
    }
  }
