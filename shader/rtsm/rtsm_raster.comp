#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint MaxVert    = 64;
const uint MaxPrim    = 64;
const uint MaxInd     = (MaxPrim*3);

struct Vertex {
  vec3 pos;
  };

layout(push_constant, std430) uniform UboPush {
  int meshletCount;
  } push;
//layout(binding = 0, rgba8)  uniform image2D     outputImage;
layout(binding = 0, r32ui)  uniform  uimage2D   outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, std430) readonly buffer Rt  { RtsmHeader header; uint visList[]; } rtsm;

layout(binding = 5, std430) readonly buffer Pos { uint    alloc; uint data[]; } pos;
layout(binding = 6)         uniform  texture2D  textureMain[];
layout(binding = 7)         uniform  sampler    samplerMain;


vec3  dbgColor  = vec3(0);
ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);

// counters
uint numMeshlets  = 0;
uint numTriangles = 0;

shared uint dbgCounter;
uint mergeCounter(uint cnt) {
  dbgCounter = 0;
  barrier();

  atomicAdd(dbgCounter, cnt);
  barrier();

  return dbgCounter;
  }

// utility
shared uvec4 rayPacketBbox;
shared uint  rayMinDepth;
void rayBbox(vec3 orig, bool activeRay) {
  rayMinDepth   = 0xFFFFFFFF;
  rayPacketBbox = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  barrier();

  if(activeRay) {
    atomicMin(rayPacketBbox.x, floatToOrderedUint(orig.x));
    atomicMin(rayPacketBbox.y, floatToOrderedUint(orig.y));
    atomicMax(rayPacketBbox.z, floatToOrderedUint(orig.x));
    atomicMax(rayPacketBbox.w, floatToOrderedUint(orig.y));

    atomicMin(rayMinDepth, floatToOrderedUint(orig.z));
    }
  barrier();
  }

// light/occlusion/matrix
float lambert(vec3 normal) {
  return max(0.0, dot(scene.sunDir,normal));
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  // return scene.viewProjectInv * scr;
  }

// pagging
int shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = 0;
  return max(0, int(minLod + bias));
  }

int calcMipIndex(in vec2 shPos) {
  float d  = max(abs(shPos.x), abs(shPos.y));
  uint  id = uint(d);
  return findMSB(id)+1;
  }

// ray managment
vec3 calcRayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

uint rayPacketId(const vec2 shPos, const float z) {
#if 0
  float dZ   = linearDepth(     z, scene.clipInfo);
  float d0   = linearDepth(0,      scene.clipInfo);
  float d1   = linearDepth(0.9999, scene.clipInfo);
  float d    = (dZ-d0)/(d1-d0);

  int id = int(d*32);
  if(id>=32)
    return 0;
  return 1u << id;
#else
  int mip = calcMipIndex(shPos);
  if(mip>=32)
    return 0;
  return 1u << mip;
#endif
  }

shared uint rayPacketMask;
uint mergeMasks(uint m) {
  rayPacketMask = 0;
  barrier();
  atomicOr(rayPacketMask, m);
  barrier();
  return rayPacketMask;
  }

// meshlet-data
uvec3 pullPrimitive(const uint ptr, const uint laneId) {
  uint bits = pos.data[ptr+laneId];

  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

Vertex pullVertex(uint ptr, const uint laneId) {
  ptr += 4*laneId;

  Vertex ret;
  ret.pos.x = uintBitsToFloat(pos.data[ptr+0]);
  ret.pos.y = uintBitsToFloat(pos.data[ptr+1]);
  ret.pos.z = uintBitsToFloat(pos.data[ptr+2]);
  //TODO: UV

  return ret;
  }

shared uint   maxPrim;
shared uvec3  primitiveIndices[MaxPrim];
shared float  primitiveAreaInv[MaxPrim];
shared Vertex meshVertices    [MaxVert];
void processMeshletPrimitives(uint ptr, uint primCount, vec4 rbbox) {
  const uint laneID = gl_LocalInvocationIndex;

  if(laneID<primCount) {
    const uvec3 tri = pullPrimitive(ptr, laneID);
    const vec3  a   = meshVertices[tri.x].pos.xyz;
    const vec3  b   = meshVertices[tri.y].pos.xyz;
    const vec3  c   = meshVertices[tri.z].pos.xyz;

    const vec4 tbb = bboxOf(a.xy, b.xy, c.xy);
    if(!bboxIntersect(tbb, rbbox))
      return;

    const uint  id   = atomicAdd(maxPrim, 1);
    const float area = edgeFunction(a.xy, b.xy, c.xy);

    primitiveIndices[id] = tri;
    primitiveAreaInv[id] = (1.0/area);

    ++numTriangles;
    }
  }

void processMeshletVertices(const uint ptr) {
  const uint laneID = gl_LocalInvocationIndex;

  const uint vertCount = MaxVert; //TODO
  if(laneID<vertCount) {
    meshVertices[laneID] = pullVertex(ptr, laneID);
    }
  }

bool rasterizeMeshletShadow(const vec3 ray) {
  for(uint i=0; i<maxPrim; ++i) {
    uvec3 tri = primitiveIndices[i];
    vec3  a   = meshVertices[tri.x].pos.xyz;
    vec3  b   = meshVertices[tri.y].pos.xyz;
    vec3  c   = meshVertices[tri.z].pos.xyz;

    float w0  = edgeFunction(b.xy, c.xy, ray.xy);
    float w1  = edgeFunction(c.xy, a.xy, ray.xy);
    float w2  = edgeFunction(a.xy, b.xy, ray.xy);

    if(w0 < 0 || w1 < 0 || w2 < 0)
      continue;

    const float areaInv = primitiveAreaInv[i];
    const vec3  bc      = vec3(w0,w1,w2);
    const float depth   = dot(vec3(a.z,b.z,c.z), bc)*areaInv;
    if(depth > ray.z)
      return true;
    }
  return false;
  }

// meshlets-trace
shared uint numVisMeshlets;
shared uint meshletsId[NumThreads];

bool isMeshletVisible(uint ptr, const vec4 rbbox) {
  vec4  aabb;
  float depthMax;

  aabb.x   = uintBitsToFloat(pos.data[ptr+0]);
  aabb.y   = uintBitsToFloat(pos.data[ptr+1]);
  aabb.z   = uintBitsToFloat(pos.data[ptr+2]);
  aabb.w   = uintBitsToFloat(pos.data[ptr+3]);
  depthMax = uintBitsToFloat(pos.data[ptr+4]);

  if(uintBitsToFloat(rayMinDepth) > depthMax)
    return false;
  if(!bboxIntersect(aabb, rbbox))
    return false;
  return true;
  }

void pullMeshlets(const uint step, const vec4 rbbox) {
  const uint laneID = gl_LocalInvocationIndex;
  const uint visId  = step*NumThreads + laneID;
  if(visId>=rtsm.header.visCount)
    return;

  const uint ptr = rtsm.visList[visId];
  if(ptr!=0xFFFFFFFF && isMeshletVisible(ptr, rbbox)) {
    uint id = atomicAdd(numVisMeshlets, 1);
    meshletsId[id] = ptr;
    ++numMeshlets;
    };
  }

bool tracePacket(const vec3 ray, const vec4 rbbox) {
  if(isnan(rbbox.x))
    return false;

  bool shadow = false;
  int  count  = 0;

  const uint laneID = gl_LocalInvocationIndex;
  const uint steps  = ((rtsm.header.visCount + NumThreads - 1)/NumThreads);
  for(uint i=0; i<steps; ++i) {
    numVisMeshlets = 0;
    barrier();

    pullMeshlets(i, rbbox);
    barrier();
    // continue;

    for(uint r=0; r<numVisMeshlets; ++r) {
      const uint maxMesh = 6;
      const uint ptr     = meshletsId[r];
      const uint primCnt = pos.data[ptr+5];

      processMeshletVertices(ptr+maxMesh+primCnt);
      maxPrim = 0;
      barrier();

      processMeshletPrimitives(ptr+maxMesh, primCnt, rbbox);
      barrier();

      shadow = shadow || rasterizeMeshletShadow(ray);
      barrier();
      }
    }
  barrier();
  return shadow;
  }

void main() {
  numMeshlets = 0;
  barrier();

  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);

  const vec4  wpos   = worldPos(fragCoord.xy, z) + vec4(normal*0.002, 0);
  const vec3  ray    = calcRayOrigin(wpos);

  bool        shadow = false;
  shadow             = shadow || (dot(scene.sunDir, normal) <= 0 && z!=1.0);
  shadow             = shadow || planetOcclusion(wpos.y/wpos.w, scene.sunDir);

  const bool  actRay = (z < 1) && !shadow;

  const uint  selfMask = actRay ? rayPacketId(ray.xy,z) : 0;
  uint        pkgMask  = mergeMasks(selfMask);

  // if(bitCount(pkgMask)==1) {
  while(pkgMask!=0) {
    const int bit = findLSB(pkgMask);
    pkgMask &= ~(1u << bit);

    bool isInBin = (selfMask & (1u << bit))!=0;
    rayBbox(ray, actRay && isInBin);
    const bool sh = tracePacket(ray, orderedUintToFloat(rayPacketBbox));
    if(actRay && isInBin)
      shadow = sh;
    }

  if(valid) {
    //imageStore(outputImage, fragCoord, uvec4(mergeCounter(numMeshlets)));
    //imageStore(outputImage, fragCoord, uvec4(mergeCounter(numTriangles)));
    imageStore(outputImage, fragCoord, uvec4(shadow));
    }
  }
