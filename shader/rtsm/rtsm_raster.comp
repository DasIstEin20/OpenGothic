#version 450

#extension GL_GOOGLE_include_directive    : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_samplerless_texture_functions : enable
// bindless
#extension GL_EXT_nonuniform_qualifier : enable
// #extension GL_KHR_memory_scope_semantics : enable

#include "common.glsl"
#include "scene.glsl"
#include "rtsm/rtsm_common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

const uint NumThreads = gl_WorkGroupSize.x*gl_WorkGroupSize.y*gl_WorkGroupSize.z;
const uint MaxVert    = 64;
const uint MaxPrim    = 64;
const uint MaxInd     = (MaxPrim*3);

struct Vertex {
  vec3 pos;
  };

layout(push_constant, std430) uniform UboPush {
  int meshletCount;
  } push;
layout(binding = 0, r8)     uniform  image2D    outputImage;
layout(binding = 1, std140) uniform  UboScene   { SceneDesc scene; };
layout(binding = 2)         uniform  utexture2D gbufNormal;
layout(binding = 3)         uniform  texture2D  depth;
layout(binding = 4, r32ui)  uniform  uimage2D   primitiveBins;
layout(binding = 5, std430) readonly buffer Pos { uint alloc; uint data[]; } pos;
layout(binding = 6, r32ui)  uniform  uimage2D   dbgImage;

layout(binding = 7)         uniform  texture2D  textureMain[];
layout(binding = 8)         uniform  sampler    samplerMain;


vec3  dbgColor  = vec3(0);
ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
ivec2 tileCoord = (fragCoord/RTSM_BIN_SIZE)*RTSM_BIN_SIZE;

shared uint dbgCounter;
uint mergeCounter(uint cnt) {
  dbgCounter = 0;
  barrier();

  atomicAdd(dbgCounter, cnt);
  barrier();

  return dbgCounter;
  }

// utility
shared uvec4 rayBbox;
shared uint  rayZmin;
void rayBboxses(const vec3 ray, bool activeRay) {
  rayBbox = uvec4(0xFFFFFFFF, 0xFFFFFFFF, 0, 0);
  rayZmin = 0xFFFFFFFF;
  barrier();

  if(activeRay) {
    atomicMin(rayBbox.x, floatToOrderedUint(ray.x));
    atomicMin(rayBbox.y, floatToOrderedUint(ray.y));
    atomicMax(rayBbox.z, floatToOrderedUint(ray.x));
    atomicMax(rayBbox.w, floatToOrderedUint(ray.y));
    atomicMin(rayZmin,   floatToOrderedUint(ray.z));
    }
  }

// light/occlusion/matrix
float lambert(vec3 normal) {
  return max(0.0, dot(scene.sunDir,normal));
  }

vec4 worldPos(ivec2 frag, float depth) {
  const vec2 fragCoord = ((frag.xy+0.5)*scene.screenResInv)*2.0 - vec2(1.0);
  const vec4 scr       = vec4(fragCoord.x, fragCoord.y, depth, 1.0);
  return scene.viewProjectLwcInv * scr;
  // return scene.viewProjectInv * scr;
  }

// pagging
int shadowLod(vec2 dx, vec2 dy) {
  float px     = dot(dx, dx);
  float py     = dot(dy, dy);
  float maxLod = 0.5 * log2(max(px, py)); // log2(sqrt()) = 0.5*log2()
  float minLod = 0.5 * log2(min(px, py));

  const float bias = 0;
  return max(0, int(minLod + bias));
  }

int calcMipIndex(in vec2 shPos) {
  float d  = max(abs(shPos.x), abs(shPos.y));
  uint  id = uint(d);
  return findMSB(id)+1;
  }

// ray managment
vec3 calcRayOrigin(const vec4 wpos) {
  vec4 shPos = scene.viewVirtualShadowLwc * wpos;
  shPos.xyz /= shPos.w;
  return shPos.xyz;
  }

// meshlet-data
uvec3 pullPrimitive(const uint ptr, const uint laneId) {
  uint bits = pos.data[ptr+laneId];

  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

Vertex pullVertex(uint ptr, const uint laneId) {
  ptr += 4*laneId;

  Vertex ret;
  ret.pos.x = uintBitsToFloat(pos.data[ptr+0]);
  ret.pos.y = uintBitsToFloat(pos.data[ptr+1]);
  ret.pos.z = uintBitsToFloat(pos.data[ptr+2]);
  //TODO: UV

  return ret;
  }

shared float  primitiveAreaInv[MaxPrim];
shared Vertex meshVertices    [MaxPrim*3];
bool isPrimitiveVisible(const vec4 aabb) {
  //float depthMax;

  const vec4 rbbox = orderedUintToFloat(rayBbox);
  // if(uintBitsToFloat(rayZmin) > depthMax)
  //   continue;
  if(!bboxIntersect(aabb, rbbox))
    return false;
  return true;
  }

void pullPrimitives(uint primitive) {
  const uint laneID  = gl_LocalInvocationIndex;
  const uint maxMesh = 6;

  const uint  bId = primitive+1;
  const uint  pkg = imageLoad(primitiveBins, tileCoord + ivec2(bId%RTSM_BIN_SIZE, bId/RTSM_BIN_SIZE)).x;

  const uint  ptr = (pkg >> 8);
  const uint  pId = pkg & 0xFF;

  const uint  primCnt = pos.data[ptr+5];
  const uvec3 tri     = pullPrimitive(ptr+maxMesh, pId);
  const uint  ptrV    = ptr + maxMesh + primCnt;

  const Vertex a    = pullVertex(ptrV, tri.x);
  const Vertex b    = pullVertex(ptrV, tri.y);
  const Vertex c    = pullVertex(ptrV, tri.z);

  const vec4  tbb = bboxOf(a.pos.xy, b.pos.xy, c.pos.xy);
  if(!isPrimitiveVisible(tbb)) {
    primitiveAreaInv[laneID] = -1;
    return;
    }

  meshVertices[laneID*3+0] = a;
  meshVertices[laneID*3+1] = b;
  meshVertices[laneID*3+2] = c;
  primitiveAreaInv[laneID] = 1.0/edgeFunction(a.pos.xy, b.pos.xy, c.pos.xy);
  }

shared uint numActiveRays;
bool tracePacket(const vec3 ray, bool actRay) {
  const uint laneID  = gl_LocalInvocationIndex;

  if(actRay)
    atomicAdd(numActiveRays, 1);
  barrier();

  bool shadow = !actRay;

  const uint tileHeader    = imageLoad(primitiveBins, tileCoord).x;
  const uint numPrimitives = tileHeader & 0xFFFF;
  const uint numPrim       = (NumThreads/3);
  const uint steps         = (numPrimitives*3 + numPrim - 1)/numPrim;

  if((tileHeader & (1u<<31))!=0) {
    // error - emit 4x4 grid to display
    ivec2 tile = fragCoord/4;
    return (tile.x+tile.y)%2==0;
    }

  for(uint s=0; s<steps; ++s) {
    if(numActiveRays==0)
      break;

    const uint primitive = s*steps + laneID;
    if(primitive<numPrimitives)
      pullPrimitives(primitive);
    barrier();

    for(uint id=0; id<numPrim; ++id) {
      const uint i = s*steps + id;
      if(i>=numPrimitives)
        break;
      if(shadow)
        break;

      const float areaInv = primitiveAreaInv[id];
      if(areaInv<0)
        continue;

      vec3  a  = meshVertices[id*3+0].pos;
      vec3  b  = meshVertices[id*3+1].pos;
      vec3  c  = meshVertices[id*3+2].pos;

      float w0 = edgeFunction(b.xy, c.xy, ray.xy);
      float w1 = edgeFunction(c.xy, a.xy, ray.xy);
      float w2 = edgeFunction(a.xy, b.xy, ray.xy);

      if(w0 < 0 || w1 < 0 || w2 < 0)
        continue;

      const vec3  bc      = vec3(w0,w1,w2);
      const float depth   = dot(vec3(a.z,b.z,c.z), bc)*areaInv;
      if(depth > ray.z) {
        shadow = true;
        atomicAdd(numActiveRays, -1);
        break;
        }
      }
    barrier();
    }
  return shadow;
  }

void main() {
  const ivec2 size   = textureSize(depth, 0);
  const bool  valid  = all(lessThan(fragCoord, size));

  const float z      = valid ? texelFetch(depth, fragCoord, 0).x  : 1.0;
  const vec3  normal = valid ? normalFetch(gbufNormal, fragCoord) : vec3(0);
  const float lamb   = imageLoad(outputImage, fragCoord).x;

  const vec4  wpos   = worldPos(fragCoord.xy, z) + vec4(normal*0.002, 0);
  const vec3  ray    = calcRayOrigin(wpos);
  const bool  actRay = (lamb>0);

  numActiveRays= 0;
  rayBboxses(ray, actRay);
  barrier();

  const bool shadow = tracePacket(ray, actRay);
  if(actRay && shadow)
    imageStore(outputImage, fragCoord, vec4(0));

  if(valid) {
    //imageStore(dbgImage, fragCoord, uvec4(mergeCounter(numMeshlets)));
    }
  }
